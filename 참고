이미지 파일에서 텍스트를 추출하기 위한 PHP 라이브러리로는 **Tesseract OCR for PHP**가 매우 인기가 있습니다[](https://products.fileformat.com/ko/ocr/php/tesseract-ocr-for-php/ "1"). 이 라이브러리는 오픈 소스이며 이미지, 스캔한 문서 및 PDF에서 텍스트를 추출하는 데 유용합니다[](https://products.fileformat.com/ko/ocr/php/tesseract-ocr-for-php/ "1").

### Tesseract OCR for PHP 설치 방법
1. **Composer를 사용한 설치**:
   ```bash
   composer require thiagoalessio/tesseract_ocr
   ```[](https://products.fileformat.com/ko/ocr/php/tesseract-ocr-for-php/ "1")

2. **Github 저장소에서 설치**:
   ```bash
   git clone https://github.com/thiagoalessio/tesseract-ocr-for-php.git
   ```[](https://products.fileformat.com/ko/ocr/php/tesseract-ocr-for-php/ "1")

### 기본 사용 예제
```php
use TesseractOCR\TesseractOCR;

$imagePath = '/path/to/your/image.jpg';
$tesseract = new TesseractOCR($imagePath);
$tesseract->setLanguage('eng'); // Set the desired language for text recognition
$text = $tesseract->run();
echo $text;
```[](https://products.fileformat.com/ko/ocr/php/tesseract-ocr-for-php/ "1")

이 코드는 이미지 파일을 로드하고, Tesseract OCR 엔진을 사용하여 텍스트를 추출합니다[](https://products.fileformat.com/ko/ocr/php/tesseract-ocr-for-php/ "1"). 추출된 텍스트는 `echo`로 출력됩니다[](https://products.fileformat.com/ko/ocr/php/tesseract-ocr-for-php/ "1").

추가적으로, Tesseract OCR for PHP는 다양한 페이지 분할 모드와 전처리 기능을 제공하여 OCR 정확도를 높일 수 있습니다[](https://products.fileformat.com/ko/ocr/php/tesseract-ocr-for-php/ "1").

혹시 더 궁금한 점이 있으신가요? 😊






이미지의 특정 영역을 자르는 데 도움이 되는 PHP 라이브러리로는 **Gumlet's PHP Image Resize**가 있습니다[](https://github.com/gumlet/php-image-resize "1"). 이 라이브러리는 이미지를 크기 조정, 축소, 자르는 등의 기능을 제공합니다[](https://github.com/gumlet/php-image-resize "1").

### Gumlet's PHP Image Resize 설치 방법
1. **Composer를 사용한 설치**:
   ```bash
   composer require gumlet/php-image-resize
   ```[](https://github.com/gumlet/php-image-resize "1")

2. **Github 저장소에서 설치**:
   ```bash
   git clone https://github.com/gumlet/php-image-resize.git
   ```[](https://github.com/gumlet/php-image-resize "1")

### 기본 사용 예제
```php
use Gumlet\ImageResize;

$imagePath = '/path/to/your/image.jpg';
$image = new ImageResize($imagePath);
$image->crop(100, 100, 200, 200); // x, y, width, height
$image->save('cropped_image.jpg');
```

이 코드는 이미지 파일을 로드하고, 지정된 영역을 자르고, 새로운 이미지 파일로 저장합니다[](https://github.com/gumlet/php-image-resize "1").

추가적으로, 이 라이브러리는 다양한 페이지 분할 모드와 전처리 기능을 제공하여 이미지 자르기 작업을 더 정교하게 수행할 수 있습니다[](https://github.com/gumlet/php-image-resize "1").

혹시 더 궁금한 점이 있으신가요? 😊






Gumlet의 PHP Image Resize 라이브러리를 사용하여 이미지의 특정 영역을 자르는 코드를 아래에 설명할게요. 이번 예시에서는 이미지의 top 50px, left 30px, 넓이 100px, 높이 10px 부분을 자릅니다.

### 설치
먼저, Composer를 사용하여 라이브러리를 설치합니다:
```bash
composer require gumlet/php-image-resize
```

### 코드 예제
```php
use Gumlet\ImageResize;
use Gumlet\ImageResizeException;

$imagePath = 'path/to/your/image.jpg';
$croppedImagePath = 'path/to/your/cropped_image.jpg';

try {
    // 이미지 불러오기
    $image = new ImageResize($imagePath);

    // 이미지 크기 조절 및 자르기
    $image->freecrop(100, 10, 30, 50); // 넓이, 높이, left, top
    
    // 새로운 이미지 저장
    $image->save($croppedImagePath);

    echo '이미지가 성공적으로 크롭되었습니다!';
} catch (ImageResizeException $e) {
    echo '이미지 크롭 중 오류가 발생했습니다: ' . $e->getMessage();
}
```

이 코드는 다음과 같은 과정을 거칩니다:
1. **이미지 불러오기**: 지정된 경로에서 이미지를 불러옵니다.
2. **이미지 크기 조절 및 자르기**: `freecrop` 메서드를 사용하여 이미지의 특정 영역을 자릅니다. `freecrop` 메서드는 넓이, 높이, left, top 값을 순서대로 입력받습니다.
3. **새로운 이미지 저장**: 자른 이미지를 새로운 경로에 저장합니다.
4. **오류 처리**: 이미지 크롭 과정에서 오류가 발생할 경우 이를 처리합니다.

이 예제를 참고하여 이미지를 자를 수 있습니다. 혹시 더 궁금한 점이 있으신가요? 😊
